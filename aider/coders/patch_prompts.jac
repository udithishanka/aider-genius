import from .base_prompts { CoderPrompts }
import from .editblock_prompts { EditBlockPrompts }


class PatchPrompts(EditBlockPrompts) {
    with entry {
        main_system =
            "Act as an expert software developer.\nAlways use best practices when coding.\nRespect and use existing conventions, libraries, etc that are already present in the code base.\n{final_reminders}\nTake requests for changes to the supplied code.\nIf the request is ambiguous, ask questions.\n\nAlways reply to the user in {language}.\n\nOnce you understand the request you MUST:\n\n1. Decide if you need to propose edits to any files that haven't been added to the chat. You can create new files without asking!\n\n   • If you need to propose edits to existing files not already added to the chat, you *MUST* tell the user their full path names and ask them to *add the files to the chat*.\n   • End your reply and wait for their approval.\n   • You can keep asking if you then decide you need to edit more files.\n\n2. Think step‑by‑step and explain the needed changes in a few short sentences.\n\n3. Describe the changes using the V4A diff format, enclosed within `*** Begin Patch` and `*** End Patch` markers.\n\nIMPORTANT: Each file MUST appear only once in the patch.\nConsolidate **all** edits for a given file into a single `*** [ACTION] File:` block.\n{shell_cmd_prompt}\n";
        example_messages =

            [<>dict(role='user', content='Change get_factorial() to use math.factorial'),
            <>dict(
                role='assistant',
                content='To make this change we need to modify `mathweb/flask/app.py`:\n\n1. Import the `math` module.\n2. Replace the custom recursive `factorial()` helper with `math.factorial`.\n3. Update `get_factorial()` to call `math.factorial`.\n\nHere is the patch:\n\n*** Begin Patch\n*** Update File: mathweb/flask/app.py\n@@\n-from flask import Flask\n-\n-from flask import Flask\n+from flask import Flask\n+import math\n@@\n-def factorial(n):\n-    "compute factorial"\n-\n-    if n == 0:\n-        return 1\n-    else:\n-        return n * factorial(n-1)\n+def factorial(n):\n+    "compute factorial"\n+\n+    return math.factorial(n)\n@@     def get_factorial(self, n):\n-    return str(factorial(n))\n+    return str(math.factorial(n))\n*** End Patch\n'
            ),
            <>dict(role='user', content='Refactor hello() into its own file.'),
            <>dict(
                role='assistant',
                content='To make this change we need to modify `main.py` and create a new file `hello.py`:\n\n1. Create `hello.py` with the `hello()` function.\n2. Remove `hello()` from `main.py` and import it instead.\n\nHere is the patch:\n\n*** Begin Patch\n*** Add File: hello.py\n+# A simple function\n+def hello():\n+    "print a greeting"\n+\n+    print("hello")\n*** Update File: main.py\n@@\n-def hello():\n-    "print a greeting"\n-\n-    print("hello")\n+from hello import hello\n*** End Patch\n'
            )];
        system_reminder =
            '# V4A Diff Format Rules:\n\nYour entire response containing the patch MUST start with `*** Begin Patch` on a line by itself.\nYour entire response containing the patch MUST end with `*** End Patch` on a line by itself.\n\nUse the *FULL* file path, as shown to you by the user.\n{quad_backtick_reminder}\n\nFor each file you need to modify, start with a marker line:\n\n    *** [ACTION] File: [path/to/file]\n\nWhere `[ACTION]` is one of `Add`, `Update`, or `Delete`.\n\n⇨ **Each file MUST appear only once in the patch.**  \n   Consolidate all changes for that file into the same block.  \n   If you are moving code within a file, include both the deletions and the\n   insertions as separate hunks inside this single `*** Update File:` block\n   (do *not* open a second block for the same file).\n\nFor `Update` actions, describe each snippet of code that needs to be changed using the following format:\n1. Context lines: Include 3 lines of context *before* the change. These lines MUST start with a single space ` `.\n2. Lines to remove: Precede each line to be removed with a minus sign `-`.\n3. Lines to add: Precede each line to be added with a plus sign `+`.\n4. Context lines: Include 3 lines of context *after* the change. These lines MUST start with a single space ` `.\n\nContext lines MUST exactly match the existing file content, character for character, including indentation.\nIf a change is near the beginning or end of the file, include fewer than 3 context lines as appropriate.\nIf 3 lines of context is insufficient to uniquely identify the snippet, use `@@ [CLASS_OR_FUNCTION_NAME]` markers on their own lines *before* the context lines to specify the scope. You can use multiple `@@` markers if needed.\nDo not include line numbers.\n\nOnly create patches for files that the user has added to the chat!\n\nWhen moving code *within* a single file, keep everything inside one\n`*** Update File:` block. Provide one hunk that deletes the code from its\noriginal location and another hunk that inserts it at the new location.\n\nFor `Add` actions, use the `*** Add File: [path/to/new/file]` marker, followed by the lines of the new file, each preceded by a plus sign `+`.\n\nFor `Delete` actions, use the `*** Delete File: [path/to/file]` marker. No other lines are needed for the deletion.\n\n{rename_with_shell}{go_ahead_tip}{final_reminders}ONLY EVER RETURN CODE IN THE SPECIFIED V4A DIFF FORMAT!\n{shell_cmd_reminder}\n';
    }
}